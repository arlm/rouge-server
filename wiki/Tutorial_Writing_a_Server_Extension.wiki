#summary This page describes how to build a server extension.

An Expansion in Rouge allows the server to send and handle new types of commands. These commands are most likely game-specific, they implement specific parts of the game for which the game is being used. Writing an expansion can be done in two steps, designing the communication protocol and implementing the expansion.

In this tutorial, we will implement an expansion which records the highscore for a game. A client can either record the high score, or request what is the current highscore. In addition, the server will periodacly send updates to any client that has submited a score.

=Protocol Design=

In Rouge, there are two components to a command, the command keyword and the command payload. In the case of the highscore protocol, we will have three command keys, highscore.get and highscore.submit and highscore update.

In our scenario, the highscore.get command would have no payload, the command simply request the highest score. However, the command would return a string with the "name" of the highscorer and an integer value of the highest "score". The update command would return a similar value.

Publishing our highscore would have payload of two paramters, a string with the players "name" and an integer holding the "score". It would return a boolean "newHighScore" indicating if the submitted highscore was indeed a new high score.

If we were to send the commands using the Java client, the commands would look as such:
 
 RougeObject payload = new RougeObject();
 rougeDriver.send("highscore.get", payload);

 payload = new RougeObject();
 payload.putString("name", "High Scorer"); 
 payload.putInt("score", 999999);
 rougeDriver.send("highscore.submit", payload);

The code to handle the output would be as such.

public void onMessage(String command, RougeObject payload) {
		
	if (command.equals("highscore.get") || command.equals("highscore.update")) {
	
		System.out.println("The highest score of " + payload.getInteger("score") +
			"is held by" + payload.getString("name") );
	
	} else if (command.equals("highscore.get")) {
	
		if(payload.getBoolean("newHighScore")) {
			System.out.println("We scored a new high score!");
		}
	}
}

=Setting up a Development Environment=

There are two ways to setup a development environment, one is easier, and the other  is a lot more flexible for development, but harder to setup. Most developer will prefer the second setup.

==Scenario 1: Easier==

Create a project in your favorite IDE program and add the rouge-server-xx.jar  jar file to your class path. You can start developing the extension right  away.

When you want to test out your extension, compile and jar your extension. Place that jar, along with any needed configuration file, in the extension directory of Rouge Server. Start or restart the server. The extension should be automatically be loaded.

If you are having problem loading the extension, check out the section below on packaging and distribution.

==Scenario 2: Better, but more difficult==

Create a project in your favorite IDE using the Rouge Server (either the download or the source) as your base directory. Create an additional source directory to hold the source of you extension.

You'll need to create the configuration file for the extension, but you don't need to specify a jar file to load. You'll load those class files directly from your source directory.

To start Rouge Server, simply use the main method of the ca.qc.adinfo.rouge.RougeServer class.

=Writting the extension=

An extension is composed of three types of components, a configuration file, one
or several commands and one or several modules. ...

=Preparing for distribution=

Package the compiled class files of your extension in a jar file. Place that jar file, along with the configuration file and any other jar files required by your library in the extension folder. 

Rouge components are built using Apache Ant. We highly recommend using it to automate the compilation and packaging of your extension.