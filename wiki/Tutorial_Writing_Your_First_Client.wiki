#summary Describes how to write your first client program for RougeServer.

= Introduction =

Rouge was designed to be flexible.


= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages


= Java =

{{{

public class RougeTest extends RougeListener {

	private RougeDriver driver;
	
	public RougeTest() {
		
		this.driver = new RougeDriver("localhost", 6611, this, false);
		
		try {
			this.driver.connect();
		} catch (RougeConnectionFailure e) {
			System.exit(-1);
		}		
		
		// Keeps the application going
		while(true) {
			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
				// Nothing to do
			}
		}
	}
	
	@Override
	public void onMessage(String command, RougeObject payload) {
		
		System.out.println(command + " " + payload.toJSON().toString());
	}

	@Override
	public void onConnect() {
		
		RougeObject payload = new RougeObject();
		payload.putString("username", "bob");
		payload.putString("password", "password");
				
		this.driver.send("login", payload);
		
		RougeObject newPayload = new RougeObject();
		newPayload.putString("name", "testRoom");
		this.driver.send("room.create", newPayload);
		
		newPayload.putString("message", "hello");
		this.driver.send("room.say", newPayload);
	}

	@Override
	public void onDisconnect() {
		
		log.debug("Disconnected ...");
	}

	public static void main(String[] args) {
		 new RougeTest();
	}
}

}}}

=Objective-C=

The Objective-C example is wrapped in a simple Cocoa application that opens a window and then connects to the server.

==RougeDriverAppDelegate.h==

{{{
#import <Cocoa/Cocoa.h>
#import "RougeDriver.h"

@interface RougeDriverAppDelegate : NSObject <NSApplicationDelegate, RougeListener> {
@private
    NSWindow *window;
    RougeDriver* driver;
}

@property (assign) IBOutlet NSWindow *window;

@end
}}}

==RougeDriverAppDelegate.c==
{{{
#import "RougeDriverAppDelegate.h"

@implementation RougeDriverAppDelegate

@synthesize window;

- (void)applicationDidFinishLaunching:(NSNotification *)aNotification
{
    driver = [[RougeDriver alloc] initWithHandler:self];
    
    [driver connect:@"localhost" toPort:6612 withBEncoding:true];
    
}


- (void) onConnect {
                    
    NSLog(@"On Connect");
    
    RougeObject *payload = [[RougeObject alloc] init]; 
    [payload putString:@"bob" withKey:@"username"];
    [payload putString:@"password" withKey:@"password"];
    
    [driver send:@"login" withPayLoad:payload];
    
    payload = [[RougeObject alloc] init]; 
    [payload putString:@"main" withKey:@"name"];
    
    [driver send:@"room.create" withPayLoad:payload];
    
    [payload putString:@"message" withKey:@"hello!"];
    
    [driver send:@"room.say" withPayLoad:payload];   
}
                    
- (void) onDisconnect {

    NSLog(@"On Disconnect");
}
                    

- (void) onMessage:(NSString *)command withPayLoad:(RougeObject *)rougeObject {
    
    NSLog(@"Message received! %@ %@", command,  [rougeObject toDictionary]);
}

@end
}}}

=C#=

class Program : RougeListener
{
		
	private RougeDriver driver;
		
	public Program() {

            driver = new RougeDriver("127.0.0.1", 6611, this, false);
            driver.connect();
			
	}
		
	public void onMessage(string command, RougeObject payload) {
			
		Console.WriteLine("Received {0} {1}", command, payload.toJson());
			
		if (command.Equals("login")) 
		{
			RougeObject rougeObject = new RougeObject();
        	    	rougeObject.putString("name", "csroom2");
       			driver.send("room.create", rougeObject);
		} 
		else if (command.Equals("room.create")) 
		{
			RougeObject rougeObject = new RougeObject();
			rougeObject.putString("name", "csroom2");
            		rougeObject.putString("message", "hello");
       			driver.send("room.say", rougeObject);
		}
	}
		
       public void onConnect() {
			
	    RougeObject rougeObject = new RougeObject();
            rougeObject.putString("username", "bob");
            rougeObject.putString("password", "password");
			
	    driver.send("login", rougeObject);
	}
		
        public void onDisconnect() {
			
		Console.WriteLine("Disconnected");
	}
		
        static void Main(string[] args)
        {
            new Program();

            while (true) ;
        }  
    }
}}}